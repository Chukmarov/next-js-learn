{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/romanchukmarov/NextJS/GithubNextJs/next-js-learn/app/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\nimport { sql } from \"@vercel/postgres\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\nconst FormSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  amount: z.coerce.number(),\n  status: z.enum([\"pending\", \"paid\"]),\n  date: z.string(),\n});\n\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function createInvoice(formData: FormData) {\n  const { customerId, amount, status } = CreateInvoice.parse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n  const amountInCents = amount * 100;\n  const date = new Date().toISOString().split(\"T\")[0];\n\n  try {\n    await sql`\n    INSERT INTO invoices (customer_id, amount, status, date)\n    VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n  `;\n  } catch (error) {\n    console.error(error);\n  }\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function updateInvoice(id: string, formData: FormData) {\n  const { customerId, amount, status } = UpdateInvoice.parse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  const amountInCents = amount * 100;\n  try{\n    await sql`\n    UPDATE invoices\n    SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n    WHERE id = ${id}\n  `;\n  } catch(error){\n    // We'll log the error to the console for now\n    console.error(error);\n  }\n\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\nexport async function deleteInvoice(id: string) {\n\n  await sql`DELETE FROM invoices WHERE id = ${id}`;\n  revalidatePath(\"/dashboard/invoices\");\n}\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AACA;;AAHA;AACA;AAEA;;;;;;;AAEA,MAAM,aAAa,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,qLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,YAAY,qLAAA,CAAA,IAAC,CAAC,MAAM;IACpB,QAAQ,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM;IACvB,QAAQ,qLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAO;IAClC,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM;AAChB;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAEtD,eAAe,cAAc,QAAkB;IACpD,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAC;QACzD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IACA,MAAM,gBAAgB,SAAS;IAC/B,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAEnD,IAAI;QACF,MAAM,uRAAA,CAAA,MAAG,CAAC;;YAEF,EAAE,WAAW,EAAE,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK;EAC7D,CAAC;IACD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;IAChB;IAEA,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,oTAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAEtD,eAAe,cAAc,EAAU,EAAE,QAAkB;IAChE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAC;QACzD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IAEA,MAAM,gBAAgB,SAAS;IAC/B,IAAG;QACD,MAAM,uRAAA,CAAA,MAAG,CAAC;;sBAEQ,EAAE,WAAW,WAAW,EAAE,cAAc,WAAW,EAAE,OAAO;eACnE,EAAE,GAAG;EAClB,CAAC;IACD,EAAE,OAAM,OAAM;QACZ,6CAA6C;QAC7C,QAAQ,KAAK,CAAC;IAChB;IAGA,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,oTAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,cAAc,EAAU;IAE5C,MAAM,uRAAA,CAAA,MAAG,CAAC,gCAAgC,EAAE,GAAG,CAAC;IAChD,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;AACjB;;;IApDsB;IAwBA;IAwBA;;AAhDA,8WAAA;AAwBA,8WAAA;AAwBA,8WAAA"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}